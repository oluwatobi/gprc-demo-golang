// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package distributions

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// DistributionsClient is the client API for Distributions service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DistributionsClient interface {
	// Responds with a service greeting
	GetVariantDistribution(ctx context.Context, in *DistributionRequest, opts ...grpc.CallOption) (*DistributionResponse, error)
}

type distributionsClient struct {
	cc grpc.ClientConnInterface
}

func NewDistributionsClient(cc grpc.ClientConnInterface) DistributionsClient {
	return &distributionsClient{cc}
}

func (c *distributionsClient) GetVariantDistribution(ctx context.Context, in *DistributionRequest, opts ...grpc.CallOption) (*DistributionResponse, error) {
	out := new(DistributionResponse)
	err := c.cc.Invoke(ctx, "/distributions.Distributions/GetVariantDistribution", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DistributionsServer is the server API for Distributions service.
// All implementations must embed UnimplementedDistributionsServer
// for forward compatibility
type DistributionsServer interface {
	// Responds with a service greeting
	GetVariantDistribution(context.Context, *DistributionRequest) (*DistributionResponse, error)
	mustEmbedUnimplementedDistributionsServer()
}

// UnimplementedDistributionsServer must be embedded to have forward compatible implementations.
type UnimplementedDistributionsServer struct {
}

func (UnimplementedDistributionsServer) GetVariantDistribution(context.Context, *DistributionRequest) (*DistributionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVariantDistribution not implemented")
}
func (UnimplementedDistributionsServer) mustEmbedUnimplementedDistributionsServer() {}

// UnsafeDistributionsServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DistributionsServer will
// result in compilation errors.
type UnsafeDistributionsServer interface {
	mustEmbedUnimplementedDistributionsServer()
}

func RegisterDistributionsServer(s grpc.ServiceRegistrar, srv DistributionsServer) {
	s.RegisterService(&Distributions_ServiceDesc, srv)
}

func _Distributions_GetVariantDistribution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DistributionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DistributionsServer).GetVariantDistribution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/distributions.Distributions/GetVariantDistribution",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DistributionsServer).GetVariantDistribution(ctx, req.(*DistributionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Distributions_ServiceDesc is the grpc.ServiceDesc for Distributions service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Distributions_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "distributions.Distributions",
	HandlerType: (*DistributionsServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetVariantDistribution",
			Handler:    _Distributions_GetVariantDistribution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "distributions.proto",
}
